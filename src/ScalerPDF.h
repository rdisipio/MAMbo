#ifndef SCAERPDF_H
#define SCAERPDF_H

#include "Commons.h"

#include <TDirectory.h>

#include "ScalerTree.h"

//namespace LHAPDF { class PDF; }
#include <LHAPDF/LHAPDF.h>

/**
  * Compute and store PDF scales from LHAPDF for SL mini n-tuple events. The
  * scales are stored in branches named after the PDF and its variant number.
  * A tree named `ScalerPDF` will be made in the output directory, or read in.
  *
  * Note that the LHAPDF initialization is expensive, so it is done statically
  * once only for many objects. When the last object is beingd destructed, it
  * will delete the LHAPDF dynamic memory.
  *
  * This class is definitely NOT thread safe.
  * 
  * @author Garrin McGoldrick (garrin.mcgoldrick@cern.ch)
  */ 


class ScalerPDF : public ScalerTree {
public:
  enum Sets { CT10, MSTW, NNPDF, NSETS };

  struct PDFParams { 
     int      id1;
     int      id2;
     double  pdf1;
     double  pdf2;
     double    x1;
     double    x2;
     double scale;
  };


private:
  /** Objects used to compute the scales */
  static std::vector<LHAPDF::PDF*> s_PDFs;
  /** Track number of instances so that the static memory can be deallocated
    * when no more instances exist. */
  static int s_numInstances;

  PDFParams m_params;

public:
  /** Full PDF set names as identified in LHAPDF */
  static const std::string s_setNamesFull[];
  /** Short PDF set names used internally */
  static const std::string s_setNames[];
  /** Number of members in each PDF set */
  static const size_t s_numSetMembers[];
  /** Total number of scales generated by all set and their members */
  static const size_t s_numScales;

  ScalerPDF();
  ~ScalerPDF();

  void initRead(const TDirectory& dir);
  void initWrite(TDirectory& dir);

  void SetParams( const PDFParams& params ) { clear();  m_params = params; };
  void calculate();
  virtual std::string indexToName(size_t i);

  static void indexToSetMember(size_t index, size_t& iset, size_t& imember);
  static size_t setMemberToIndex(size_t iset, size_t imember);
};

#endif  // SCAERPDF_H

